Deadlock is when a process owns a lock on another process that owns a lock on the original process. To detect deadlock, we checked each process that owned a lock. We would check if that lock was on a process that also owned a lock. If that lock was on the original process, that meant deadlock. If not, there was no deadlock.

We created 5% Priority 0 process, 80% Priority 1, 10% Priority 2, and 5% Priority 3 by partitioning all of the generated processes. Specifically, when creating a process, we made it choose a random number between 1 and 100 inclusive. If the number was between 1 and 5 (5 out of 100 values, or 5%), it was assigned Priority 0. If it was between 6 and 85 (80 out of 100 values, or 80%), it was assigned Priority 1. If it was between 86 and 95, it was assigned Priority 2. Finally, the remaining 5%, 96-100, was assigned Priority 3.

  Starvation detection was based on the number of quanta since a process last ran. A "lastQuantumRan" member was added to our PCB, which is initialized with the quantum it was created and updated every time the process is dispatched. The basic procedure is to regularly check the head process of each level queue in the priority queue, to see if the process has been waiting for what we define as "starving." If the process is not already flagged as promoted, then it is promoted. Otherwise, it is demoted so it doesn't block the other processes at that level.
  Several formulas for defining "starvation" were tested. Initially "n," the total number of processes in the queue, was taken as a baseline; if all processes have equal priority, they will run roughly every n quanta. Then, to weight this for priority, we took "p*n," where p is the priority level, to be the max number of quanta before a process is considered starving. However, including the number of processes created an artificial definition for starvation. As long as n continues to increase every quantum, new high priority processes will make the threshold unreachable for low priority processes, which is exactly the problem this algorithm should try to intercept.
  A constant definition of starvation was then defined as 100*priority. Priority thus still plays a role, and processes are always guaranteed to be promoted.
