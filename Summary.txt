---------------------------------------------------------
10 Runs Without Deadlock:
---------------------------------------------------------

Run 1:
Queue 0 has 1367 processes
Queue 1 has 13664 processes
Queue 2 has 848 processes
Queue 3 has 250 processes
There was no deadlock on this run.
There were a total of 16037 processes.
There were 38 terminated processes

Run 2:
Queue 0 has 1421 processes
Queue 1 has 13566 processes
Queue 2 has 812 processes
Queue 3 has 238 processes
There was no deadlock on this run.
There were a total of 16037 processes
There were 29 terminated processes

Run 3:
Queue 0 has 1434 processes
Queue 1 has 13410 processes
Queue 2 has 769 processes
Queue 3 has 259 processes
There was no deadlock on this run.
There were a total of 15872 processes
There were 27 terminated processes

Run 4:
Queue 0 has 1381 processes
Queue 1 has 13553 processes
Queue 2 has 792 processes
Queue 3 has 247 processes
There was no deadlock on this run.
There were a total of 15973
There were 44 terminated processes

Run 5:
Queue 0 has 1455 processes
Queue 1 has 13610 processes
Queue 2 has 730 processes
Queue 3 has 263 processes
There was no deadlock on this run.
There were a total of 16058 processes
There were 41 terminated processes

Run 6:
Queue 0 has 1460 processes
Queue 1 has 13575 processes
Queue 2 has 803 processes
Queue 3 has 228 processes
There was no deadlock on this run.
There were a total of 16066 processes
There were 38 terminated processes

Run 7:
Queue 0 has 1475 processes
Queue 1 has 13689 processes
Queue 2 has 698 processes
Queue 3 has 259 processes
There was no deadlock on this run.
There were a total of 16121 processes
There were 43 terminated processes

Run 8:
Queue 0 has 1425 processes
Queue 1 has 13668 processes
Queue 2 has 778 processes
Queue 3 has 264 processes
There was no deadlock on this run.
There were a total of 16125 processes
There were 43 terminated processes



Run 9:
Queue 0 has 1425 processes
Queue 1 has 13668 processes
Queue 2 has 778 processes
Queue 3 has 264 processes
There was no deadlock on this run.
There were a total of 16037 processes
There were 33 terminated processes


Run 10:
Queue 0 has 1366 processes
Queue 1 has 13781 processes
Queue 2 has 727 processes
Queue 3 has 251 processes
There was no deadlock on this run.
There were a total of 16125 processes
There were 28 terminated processes


---------------------------------------------------------
10 Runs With Deadlock:
---------------------------------------------------------

Run 1:
Queue 0 has 743 processes
Queue 1 has 6770 processes
Queue 2 has 215 processes
Queue 3 has 233 processes
There was deadlock on this run.
There were a total of 8021 processes.
There were 38 terminated processes


Run 2:
Queue 0 has 720 processes
Queue 1 has 6909 processes
Queue 2 has 208 processes
Queue 3 has 238 processes
There was deadlock on this run.
There were a total of 8149 processes.
There were 44 terminated processes


Run 3:
Queue 0 has 657 processes
Queue 1 has 6897 processes
Queue 2 has 194 processes
Queue 3 has 250 processes
There was deadlock on this run.
There were a total of 8104 processes.
There were 30 terminated processes


Run 4:
Queue 0 has 665 processes
Queue 1 has 6960 processes
Queue 2 has 230 processes
Queue 3 has 253 processes
There was deadlock on this run.
There were a total of 8201 processes.
There were 36 terminated processes


Run 5:
Queue 0 has 724 processes
Queue 1 has 6958 processes
Queue 2 has 203 processes
Queue 3 has 258 processes
There was deadlock on this run.
There were a total of 8257 processes.
There were 34 terminated processes


Run 6:
Queue 0 has 727 processes
Queue 1 has 6825 processes
Queue 2 has 203 processes
Queue 3 has 251 processes
There was deadlock on this run.
There were a total of 8093 processes.
There were 38 terminated processes


Run 7:
Queue 0 has 718 processes
Queue 1 has 6893 processes
Queue 2 has 205 processes
Queue 3 has 240 processes
There was deadlock on this run.
There were a total of 8147 processes.
There were 38 terminated processes


Run 8:
Queue 0 has 629 processes
Queue 1 has 6885 processes
Queue 2 has 185 processes
Queue 3 has 255 processes
There was deadlock on this run.
There were a total of 8029 processes.
There were 38 terminated processes


Run 9:
Queue 0 has 678 processes
Queue 1 has 6895 processes
Queue 2 has 201 processes
Queue 3 has 249 processes
There was deadlock on this run.
There were a total of 8101 processes.
There were 38 terminated processes


Run 10:
Queue 0 has 668 processes
Queue 1 has 6907 processes
Queue 2 has 197 processes
Queue 3 has 247 processes
There was deadlock on this run.
There were a total of 8117 processes.
There were 38 terminated processes


---------------------------------------------------------
Explanations of Algorithms:
---------------------------------------------------------

Deadlock is when a process owns a lock on another process that owns a lock on the original process. To detect deadlock, we checked each process that owned a lock. We would check if that lock was on a process that also owned a lock. If that lock was on the original process, that meant deadlock. If not, there was no deadlock.

  Starvation detection was based on the number of quanta since a process last ran. A "lastQuantumRan" member was added to our PCB, which is initialized with the quantum it was created and updated every time the process is dispatched. The basic procedure is to regularly check the head process of each level queue in the priority queue, to see if the process has been waiting for what we define as "starving." If the process is not already flagged as promoted, then it is promoted. Otherwise, it is demoted so it doesn't block the other processes at that level.
  Several formulas for defining "starvation" were tested. Initially "n," the total number of processes in the queue, was taken as a baseline; if all processes have equal priority, they will run roughly every n quanta. Then, to weight this for priority, we took "p*n," where p is the priority level, to be the max number of quanta before a process is considered starving. However, including the number of processes created an artificial definition for starvation. As long as n continues to increase every quantum, new high priority processes will make the threshold unreachable for low priority processes, which is exactly the problem this algorithm should try to intercept.
  A constant definition of starvation was then defined as 100*priority. Priority thus still plays a role, and processes are always guaranteed to be promoted.

We created 5% Priority 0 process, 80% Priority 1, 10% Priority 2, and 5% Priority 3 by partitioning all of the generated processes. Specifically, when creating a process, we made it choose a random number between 1 and 100 inclusive. If the number was between 1 and 5 (5 out of 100 values, or 5%), it was assigned Priority 0. If it was between 6 and 85 (80 out of 100 values, or 80%), it was assigned Priority 1. If it was between 86 and 95, it was assigned Priority 2. Finally, the remaining 5%, 96-100, was assigned Priority 3.
